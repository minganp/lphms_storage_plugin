import 'dart:core';

import 'package:lphms_storage_plugin/function/uuid_generator.dart';
import 'package:lphms_storage_plugin/models/LHMS.dart';
import 'package:lphms_storage_plugin/utility/position_enum.dart';
import 'package:lphms_storage_plugin/utility/prov_enum.dart';
import 'package:lphms_storage_plugin/utility/record_prefix.dart';

class HotelInfo {
  String? pk; //HO +
  String? sk; //password - register hotel, hotel id for hotel info
  String? hna;  //hotel name in lao
  String? gsi1; //hotel ID
  String? prov;  //province
  String? dis; //district
  String? mph;   //mobile for receiving register sms
  double? lat;   //latitude
  double? lon;   //longitude
  String? addr;
  HotelInfo({required this.pk,required this.sk,this.hna,this.gsi1,this.prov,this.dis,this.mph,this.lat,this.lon,this.addr});

  //Generate hotel for registration.
  // To generate hotel for registration, we need to create tow record.
  // One of it include these information: hotelId(pk),password(gsi1),
  // registration code uuid(sk),hotelName(hna),province(prov),district(dis),mobile(mph),
  // latitude(lat),longitude(lon),address(addr).
  // The other one include hotelId(pk),hotelName(in laos, as sk), which
  // used for hotel name search.
  // HotelId code like "HO#<district code>#<UUID>", district code like "RG#<district code>",
  // hotelName in laos code like "HN#<lang>#<hotel name>", uuid is generated by timestamp and random number,and code like "RI#<uuid>".
  // Password is generated by random number.
  //To register, customers provide uuid(sk) and password(gsi1) to get hotel id,
  //and other information of hotel, and use these information to finish hotel registration.
  //For customers to query register information. They can list(aws api query) hotels by hotelId begins "HO#<district code>" and sk begins with "RI#",
  // To query hotel information by hotelName, they can list(aws api query) hotels by hotelId begins "HO#<district code>" and sk begins with "HN#<lang>#<hotel name>".
  HotelInfo.createForReg({
    String? hotelName, String? province, String? district,
    String? mobile, double? latitude,double? longitude, String? address}){
    hna = hotelName;
    prov = province;
    dis = district;
    mph = mobile;
    lon = longitude;
    lat = latitude;
    addr = address;

    pk = _genHotelId();
    sk = _genRegisterId();
    gsi1 = generatePassword();

  }

  changeHotelId(){
    //replace hotel id district code with new district code
    pk = pk!.replaceFirst(RegExp(r"HO#[0-9]{2}#"), "HO#$dis#");
  }

  _genRegisterId(){
    //if district code is null, generate hotel id with default district code
    //the default district code the first pk value of disLao(file lib/utility/prov_enum.dart)
    dis ??= disLao[0]['pk'];
    return "${rPref[RecType.register]}#${generateUuid()}";
  }

  HotelInfo.createFromReg(LHMS info){
    pk = info.GSI1;
    sk = info.GSI1;
    hna = info.hna;
    prov = info.prov;
    dis = info.dis;
    mph = info.mph;
    lat = info.lat;
    lon = info.lon;
    addr = info.addr;
  }
  HotelInfo.fromLHMS(LHMS info){
    pk = info.PK;
    sk = info.SK;
    hna = info.hna;
    prov = info.prov;
    dis = info.dis;
    mph = info.mph;
    lat = info.lat;
    lon = info.lon;
    addr = info.addr;
  }

  String _genHotelId() {
    //if district code is null, generate hotel id with default district code
    //the default district code the first pk value of disLao(file lib/utility/prov_enum.dart)
    dis ??= disLao[0]['pk'];
    return "${rPref[RecType.hotel]}#$dis#${generateHotelId()}";
  }

  LHMS toLHMS(){
    return LHMS(PK: pk!,SK: pk!,hna: hna, prov: prov, dis: dis, mph: mph, lat: lat, lon: lon, addr: addr);
  }

}

class HotelName {
  late String pk; //hotel Id
  late String sk; //HN#<lang>#<hotel name>

  static genHotelName(String hotelName,String lang) => "${rPref[RecType.hotelName]}#$lang#$hotelName";

  HotelName({required this.pk, required this.sk});

  HotelName.create({required String hotelId,required String hotelName,required String lang}){
    pk = hotelId;
    sk = genHotelName(hotelName, lang);
  }
  HotelName.fromLHMS(LHMS info){
    pk = info.PK;
    sk = info.SK;
  }
  LHMS toLHMS(){
    return LHMS(PK: pk, SK: sk,);
  }
}

